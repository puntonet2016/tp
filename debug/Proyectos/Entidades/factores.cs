//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Entidades
{
    using System;
    using System.Collections.Generic;
    
    public partial class factores
    {
        /// <summary>
        /// Maximo de caracteres que puede tener el nombre del factor.
        /// </summary>
        public const int MAXIMO_NOMBRE = 50;

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public factores()
        {
            this.valores = new HashSet<valores>();
            this.habilitado = true;
        }
    
        public string nombre { get; set; }
        public bool habilitado { get; set; }
    
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<valores> valores { get; set; }

        /// <summary>
        /// Valor bajo del factor
        /// </summary>
        public string valorBajo
        {
            set { this.setValor(value, 0); }
            get { return this.getValor(0); }
        }

        /// <summary>
        /// Valor medio del factor
        /// </summary>
        public string valorMedio
        {
            set { this.setValor(value, 1); }
            get { return this.getValor(1); }
        }

        /// <summary>
        /// Valor alto del factor
        /// </summary>
        public string valorAlto
        {
            set { this.setValor(value, 2); }
            get { return this.getValor(2); }
        }

        /// <summary>
        /// Establece el nombre del valor para el rating indicado.
        /// Si ya existe un valor con el mismo rating, se le sobreescribre el nombre.
        /// </summary>
        /// <param name="_nombre">Nombre del valor.</param>
        /// <param name="_rating">Rating asociado al valor.</param>
        private void setValor(string _nombre, short _rating)
        {
            bool modificado = false;

            foreach (valores v in this.valores)
                if (v.rating == _rating)
                {
                    modificado = true;
                    v.nombre = _nombre;
                    break;
                }

            if (!modificado)
            {
                valores valor = new valores()
                {
                    nombre = _nombre,
                    rating = _rating,
                    nombreFactor = this.nombre
                };

                this.valores.Add(valor);
            }
        }

        /// <summary>
        /// Obtiene el nombre del valor para el rating dado.
        /// </summary>
        /// <param name="_rating">Rating del valor</param>
        /// <returns>Nombre del valor encontrado. Se obtiene una cadena vacia en caso de que todavía
        /// no se haya inicializado un valor con el rating solicitado.</returns>
        private string getValor(int _rating)
        {
            foreach (valores v in this.valores)
                if (v.rating == _rating)
                    return v.nombre;

            return "";
        }

        public override string ToString(){

            string ret = "Clase: factores.\n";
            ret += "Nombre: " + this.nombre + "\n";

            if (this.valores == null)
            {
                ret += "No se ha indicado ningún valor.";
                return ret;
            }


            foreach (valores v in this.valores)
                ret += "- " + v.ToString() + "\n";
                //ret += "- Valor: " + v.nombre + ". Rating: " + v.rating + "\n";

            return ret;
        }
    }
}
